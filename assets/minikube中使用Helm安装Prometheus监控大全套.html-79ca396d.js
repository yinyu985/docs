import{_ as t,W as r,X as o,Y as e,Z as s,$ as n,a0 as l,D as i}from"./framework-b4edc447.js";const p={},c=e("h1",{id:"minikube中使用helm安装prometheus监控大全套",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#minikube中使用helm安装prometheus监控大全套","aria-hidden":"true"},"#"),s(" minikube中使用Helm安装Prometheus监控大全套")],-1),u=e("p",null,"minikube is local Kubernetes, focusing on making it easy to learn and develop for Kubernetes.",-1),d=e("p",null,[s("All you need is Docker (or similarly compatible) container or a Virtual Machine environment, and Kubernetes is a single command away: "),e("code",null,"minikube start")],-1),m={href:"https://minikube.sigs.k8s.io/docs/start/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://k21academy.com/docker-kubernetes/prometheus-grafana-monitoring/",target:"_blank",rel:"noopener noreferrer"},b=l(`<h2 id="helm" tabindex="-1"><a class="header-anchor" href="#helm" aria-hidden="true">#</a> Helm</h2><blockquote><p>Helm 是一个用于 Kubernetes 应用程序部署和管理的包管理器。它的主要作用是管理 Kubernetes 中的 Charts，它们是一组预定义的 Kubernetes 资源模板，可以在 Kubernetes 群集中部署。Helm 可以让您轻松地创建、共享和安装基于 Kubernetes 的应用程序，以及管理它们的版本和依赖关系。</p></blockquote><p>以下是 Helm 的一些核心概念：</p><ol><li>Chart：一个 Chart 包含了一组预定义的 Kubernetes 资源模板，它们可以一起部署一个应用程序。一个 Chart 可以包含多个 YAML 文件，用于定义部署、服务、配置等资源。Chart 通常包含一个 <code>Chart.yaml</code> 文件和一个 <code>values.yaml</code> 文件，分别定义了 Chart 的元数据和默认配置。</li><li>Repository：Helm Chart 存储库是一个可公开访问的位置，其中包含一组可用的 Charts。存储库通常使用 HTTP 服务器托管，允许用户从远程访问和下载 Charts。</li><li>Release：在 Helm 中，Release 是指一个 Chart 的实例。在部署过程中，Helm 将 Chart 渲染为 Kubernetes 资源，并将其安装到群集中。每个 Release 都有一个唯一的名称，允许您在部署多个版本的相同 Chart 时对它们进行区分。</li><li>Values：Values 是 Chart 中的一组默认配置，用于控制应用程序的部署和行为。它们可以在安装 Chart 时通过命令行标志或 YAML 文件进行覆盖，以定制化 Chart 的部署。</li><li>Template：模板是 Chart 中的 Kubernetes 资源模板，它们可以通过 Go 中的文本模板语言进行定义。Helm 使用模板来根据 Values 生成 Kubernetes 资源，并将其部署到 Kubernetes 群集中。</li></ol><p>使用 Helm，您可以轻松地创建、打包和共享 Chart，以及管理它们的版本和依赖关系。您还可以使用 Helm 在 Kubernetes 群集中安装、升级和回滚应用程序，以及在多个群集之间共享 Charts。</p><h2 id="prometheus" tabindex="-1"><a class="header-anchor" href="#prometheus" aria-hidden="true">#</a> Prometheus</h2><blockquote><p>Prometheus监控系统是一种开源的监控解决方案，可用于监控云计算、容器和微服务环境中的应用程序。它最初由SoundCloud开发，现在由CNCF（Cloud Native Computing Foundation）管理。</p><p>Prometheus使用Pull模型来收集指标，这意味着它从要监控的应用程序中拉取指标数据。它支持许多不同类型的指标，包括计数器、测量值和摘要。Prometheus使用PromQL（Prometheus Query Language）查询语言来查询和聚合指标数据，从而使用户能够对监控数据进行更深入的分析和可视化。</p><p>Prometheus具有许多高级功能，例如自动发现服务、动态配置、报警和可视化。它还具有广泛的集成能力，可与其他工具和系统集成，如Grafana、Alertmanager和Kubernetes。</p><p>总的来说，Prometheus是一种功能强大、灵活和易于使用的监控解决方案，可帮助开发人员和运维人员更好地理解和管理他们的应用程序和基础设施。</p></blockquote><p>对于一个已经成功安装配置的minikube，我们还需要安装Helm，在MacOS中，使用brew作为包管理器安装Helm，将会非常方便，只需一条命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> helm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后<code>helm version</code> 安装成功后会显示helm当前的版本，目前是V3，网上的其他教程在使用helm时，无脑复制命令可能会报错，因为helm新版本抛弃了一些命令参数。<s>在此插一句题外话，云原生的东西，更新快的很，Prometheus、alertmanager、grafana，能容器化，就别二进制，真的很傻逼。等你某天发现了一个特性，然后想用这，但是发现你二进制安装的东西不允许你随随便便升级时，你会想起我说的话。</s></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/Users/user.^_^.<span class="token punctuation">[</span><span class="token number">10</span>:59:03<span class="token punctuation">]</span>
<span class="token operator">&gt;</span> helm version
version.BuildInfo<span class="token punctuation">{</span>Version:<span class="token string">&quot;v3.10.2&quot;</span>, GitCommit:<span class="token string">&quot;50f003e5ee8704ec937a756c646870227d7c8b58&quot;</span>, GitTreeState:<span class="token string">&quot;clean&quot;</span>, GoVersion:<span class="token string">&quot;go1.19.3&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面提到了Helm的基础概念，现在我们需要像为yum配置仓库那样，为Helm安装仓库，添加完仓库后再更新一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm repo <span class="token function">add</span> prometheus-community https://prometheus-community.github.io/helm-charts
helm repo <span class="token function">add</span> stable https://charts.helm.sh/stable
helm repo update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>见证奇迹的时候到了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm <span class="token function">install</span> prometheus prometheus-community/kube-prometheus-stack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就这一条命令，Helm就帮你把Prometheus大全套，包括Prometheus、grafana、alertmanager、node_exporter全都装进了minikube</p><p>你可以新开一个终端窗口，我使用的是item2（high level）,之所以需要新开，因为这个命令是在前台执行的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>minikube dashboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>minikube将会启动一个跟k8s一毛一样的dashboard，并且自动在浏览器打开，在这里你能看到minikube当前运行的deployment，service，pod等各类信息</p><p>不过我用的是lens，一个个人用户免费使用的k8s的IDE，在lens能够很方便的查看k8s（minikube）中的资源状态，能提供方便的编辑方式。</p><p>已经通过Helm安装了grafana，我们想上去看看呢？我可以告诉你通过Helm,Helm使用prometheus-operator安装的grafana的默认用户名和密码分别是</p><p>admin/prom-operator,当然如果你很有耐心的在minikube dashboard的界面耐心地点上几分钟，分别看看里面都有啥，你会在secret的分栏里看到</p><figure><img src="https://s2.loli.net/2023/03/15/zXoRy45Q3Pivbnf.png" alt="image-20230315112034888" tabindex="0" loading="lazy"><figcaption>image-20230315112034888</figcaption></figure><p>那么知道了grafana的信息，如何访问呢？已知刚才创建的service都是ClusterIP类型的</p><blockquote><p>在 Kubernetes 中，ClusterIP 是一种用于访问集群内部服务的虚拟 IP 地址。它代表一个 Kubernetes Service，该 Service 会将请求转发到与之关联的 Pod。ClusterIP 仅在集群内部可访问，外部网络无法访问。</p><p>在 Minikube 中，可以使用 <code>minikube service</code> 命令来暴露 Kubernetes Service，并将其映射到主机上的随机端口。此时，您可以使用主机 IP 地址和该端口号访问该服务。</p><p>例如，如果您有一个名为 <code>my-service</code> 的 Service，您可以使用以下命令将其暴露出来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube <span class="token function">service</span> my-service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令将启动一个本地代理，将 <code>my-service</code> 映射到主机上的一个随机端口，并在浏览器中打开该服务。</p><p>如果您想直接使用 ClusterIP 访问该服务，您可以通过以下方式获取 ClusterIP：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get <span class="token function">service</span> my-service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令将返回 <code>my-service</code> 的详细信息，其中包括 ClusterIP。您可以使用该 IP 地址和 Service 暴露的端口号访问该服务。但是需要注意的是，ClusterIP 只能在 Minikube 内部访问，无法从外部网络访问。</p></blockquote><p>ClusterIP 只能在 Minikube 内部访问，无法从外部网络访问,意思就是说，你在Mac上访问ClusterIP还是不行的，如果你只想通过ClusterIP访问的话，minikube提供一种方式，通过<code>minikube ssh</code> 进入到minikube模拟出的机器的内部，就是minikube中运行的k8s也是在这台机器的，通过获取到的ClusterIP和curl命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl http://10.105.58.216:9093
curl http://10.105.91.133:9090
curl http://10.107.64.147:9100/metrics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样访问是好使的，当然最好的办法当然还是使用minikube转发</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube <span class="token function">service</span> prometheus-grafana
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>--------------<span class="token operator">|</span>
<span class="token operator">|</span> NAMESPACE <span class="token operator">|</span>        NAME        <span class="token operator">|</span> TARGET PORT <span class="token operator">|</span>     URL      <span class="token operator">|</span>
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>--------------<span class="token operator">|</span>
<span class="token operator">|</span> default   <span class="token operator">|</span> prometheus-grafana <span class="token operator">|</span>             <span class="token operator">|</span> No <span class="token function">node</span> port <span class="token operator">|</span>
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>--------------<span class="token operator">|</span>
😿  <span class="token function">service</span> default/prometheus-grafana has no <span class="token function">node</span> port
🏃  Starting tunnel <span class="token keyword">for</span> <span class="token function">service</span> prometheus-grafana.
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>------------------------<span class="token operator">|</span>
<span class="token operator">|</span> NAMESPACE <span class="token operator">|</span>        NAME        <span class="token operator">|</span> TARGET PORT <span class="token operator">|</span>          URL           <span class="token operator">|</span>
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>------------------------<span class="token operator">|</span>
<span class="token operator">|</span> default   <span class="token operator">|</span> prometheus-grafana <span class="token operator">|</span>             <span class="token operator">|</span> http://127.0.0.1:52850 <span class="token operator">|</span>
<span class="token operator">|</span>-----------<span class="token operator">|</span>--------------------<span class="token operator">|</span>-------------<span class="token operator">|</span>------------------------<span class="token operator">|</span>
🎉  正通过默认浏览器打开服务 default/prometheus-grafana<span class="token punctuation">..</span>.
❗  Because you are using a Docker driver on darwin, the terminal needs to be <span class="token function">open</span> to run it.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),k={href:"http://127.0.0.1:52850",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"另外使用kubectl也能够实现端口转发，我想lens应该也是将在点点点的转换成了kubectl这样的命令来实现端口转发的。",-1),g=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,` kubectl port-forward deployment/prometheus-grafana 3000
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1);function f(_,C){const a=i("ExternalLinkIcon");return r(),o("div",null,[c,u,d,e("p",null,[s("minikube的安装在"),e("a",m,[s("官方文档"),n(a)]),s("有详细介绍此处不再赘述，"),e("a",h,[s("本文"),n(a)]),s("主要记录在minikube中Helm安装Prometheus监控大全套")]),b,e("p",null,[s("minikube开启了一个tunnel将ClusterIP和端口，转发到了Mac本地的"),e("a",k,[s("http://127.0.0.1:52850"),n(a)]),s("，如果你使用lens这样的工具，能够在service分栏里给配置一个端口转发（Port Forwarding）这样能够实现在Mac访问minikube中的ClusterIP的效果。")]),v,g])}const x=t(p,[["render",f],["__file","minikube中使用Helm安装Prometheus监控大全套.html.vue"]]);export{x as default};
