import{_ as s,W as e,X as n,a0 as a}from"./framework-b4edc447.js";const o={},c=a(`<h1 id="逆向一个docker镜像" tabindex="-1"><a class="header-anchor" href="#逆向一个docker镜像" aria-hidden="true">#</a> 逆向一个docker镜像</h1><h2 id="docker-history-no-trunc-和-dive-逆向推出的" tabindex="-1"><a class="header-anchor" href="#docker-history-no-trunc-和-dive-逆向推出的" aria-hidden="true">#</a> docker history --no-trunc 和 dive 逆向推出的</h2><blockquote><p><code>docker history --no-trunc</code>是一个Docker命令，它可以显示给定镜像的完整构建历史记录。通常情况下，当您运行<code>docker history</code>命令时，它会截断输出，只显示前12个字符的每个图像ID。使用<code>--no-trunc</code>选项可以强制输出完整的ID。</p><p>而dive是一个开源工具，可以让您深入探索Docker镜像层，并查看每个层中添加、删除或更改了哪些文件和目录。它可以帮助您理解Docker镜像的构建方式，并找到可以缩小镜像大小的优化机会。</p><p>尽管两个命令都与Docker镜像有关，但它们的使用场景不同。<code>docker history --no-trunc</code>用于查看构建镜像的历史记录，而dive则用于逆向分析镜像以寻找优化机会和问题排除。</p></blockquote><h2 id="通过shell命令直接取出dockerfile" tabindex="-1"><a class="header-anchor" href="#通过shell命令直接取出dockerfile" aria-hidden="true">#</a> 通过Shell命令直接取出dockerfile</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">history</span> <span class="token parameter variable">--format</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>.CreatedBy<span class="token punctuation">}</span><span class="token punctuation">}</span> --no-trunc<span class="token operator">=</span>true 89300b5e57f4 <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">&quot;s/\\/bin\\/sh\\ -c\\ \\#(nop)\\ //g&quot;</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">&quot;s/\\/bin\\/sh\\ -c/RUN/g&quot;</span> <span class="token operator">|</span> <span class="token function">tac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这个命令的含义如下：</p><p>这条命令是用于查看给定Docker镜像的构建历史记录，并提取出每个构建步骤的命令。具体来说，它执行以下操作：</p><ol><li>使用<code>docker history</code>命令获取镜像的完整构建历史记录，并在命令行上以逆序(tac)显示。</li></ol><ul><li><code>--format {{.CreatedBy}}</code>选项指示<code>docker history</code>命令仅输出每个构建步骤的<code>CreatedBy</code>字段，该字段包含了使用该层构建的完整命令。</li><li><code>--no-trunc=true</code>选项则强制输出完整的ID。</li><li><code>89300b5e57f4</code>是要查看的Docker镜像的ID。</li></ul><ol start="2"><li>接下来，通过管道将输出传递给两个<code>sed</code>命令。</li></ol><ul><li>第一个<code>sed</code>命令将所有<code>#(nop)</code>标记的步骤去除，因为这些步骤没有做任何有意义的工作，只是在Dockerfile中添加一行注释而已。</li><li>第二个<code>sed</code>命令将所有以<code>/bin/sh -c</code>开头的命令更改为<code>RUN</code>，以使输出符合Dockerfile语法。</li></ul><ol start="3"><li>最后，输出被逆序(tac)显示出来，以便按照正确的构建顺序查看构建步骤的命令。</li></ol><p>总之，这个命令可以帮助您了解Docker镜像的构建方式，并允许您查看每个构建步骤的完整命令。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">history</span> --no-trunc <span class="token operator">&lt;</span>image_name<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&quot; /bin/sh -c #&quot;</span> <span class="token string">&#39;{print $2}&#39;</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> +2 <span class="token operator">|</span> <span class="token function">tac</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN { FS=&quot;\\n&quot;; RS=&quot;&quot; } {print $0&quot;\\n&quot;}&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/ /\\n/g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),t=[c];function r(p,l){return e(),n("div",null,t)}const d=s(o,[["render",r],["__file","逆向一个docker镜像.html.vue"]]);export{d as default};
