import{_ as t,W as p,X as o,Y as n,Z as s,$ as l,a0 as a,D as c}from"./framework-b4edc447.js";const i={},r=a(`<h1 id="getopt长短参数" tabindex="-1"><a class="header-anchor" href="#getopt长短参数" aria-hidden="true">#</a> getopt长短参数</h1><blockquote><p>当脚本需要传入多个变量时，使用普通的$1,$2，来传递变量，就显得有点笨了（需要记住变量顺序，还要记得默认的可选参数）</p></blockquote><p>我们更希望通过类似下方式来传参：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>myscript <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span> password <span class="token parameter variable">-v</span> <span class="token parameter variable">-n</span> <span class="token number">9999</span> <span class="token number">192.168</span>.1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时 <code>getopt</code> / <code>getopts</code> 就就可以大展拳脚了。</p><h3 id="getopts-和-getopt-的区别和应用场景" tabindex="-1"><a class="header-anchor" href="#getopts-和-getopt-的区别和应用场景" aria-hidden="true">#</a> <code>getopts</code> 和 <code>getopt</code> 的区别和应用场景</h3><p><code>getopt</code> 与 <code>getopts</code> 都是 Bash 中用来获取与分析命令行参数的工具，常用在 Shell 脚本中被用来分析脚本参数。</p><ol><li><em><code>getopts</code> 是 Shell 内建命令，<code>getopt</code> 是一个独立外部工具</em></li><li><em><code>getopts</code> 使用语法简单，<code>getopt</code> 使用语法较复杂</em></li><li><em><code>getopts</code> 不支持长参数（如：<code>--option</code>），<code>getopt</code> 支持长参数</em></li><li><em><code>getopts</code> 出现的目的是为了在不太复杂的场景代替 <code>getopt</code> 较快捷地执行参数分析工作</em></li><li><em><code>getopts</code> 负责参数解析，可以方便地提取参数值，<code>getopt</code> 只负责按规则重新对参数进行排列，进一步解析需要自行编写代码处理</em></li></ol><p>根据前面提到的案例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>myscript -u username -p password -v -n 9999 192.168.1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-u</code></td><td>用户名</td></tr><tr><td><code>-p</code></td><td>密码</td></tr><tr><td><code>-n</code></td><td>端口</td></tr><tr><td><code>-v</code></td><td>显示详情</td></tr><tr><td>无名称参数</td><td>主机IP</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 处理脚本参数</span>
<span class="token comment"># -u 用户名</span>
<span class="token comment"># -p 密码</span>
<span class="token comment"># -v 是否显示详情</span>
<span class="token comment"># -n 端口</span>
<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;:u:p:n:v&quot;</span> opt_name <span class="token comment"># 通过循环，使用 getopts，按照指定参数列表进行解析，参数名存入 opt_name</span>
<span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$opt_name</span>&quot;</span> <span class="token keyword">in</span> <span class="token comment"># 根据参数名判断处理分支</span>
        <span class="token string">&#39;u&#39;</span><span class="token punctuation">)</span> <span class="token comment"># -u</span>
            <span class="token assign-left variable">CONN_USERNAME</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token comment"># 从 $OPTARG 中获取参数值</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span> <span class="token comment"># -p</span>
            <span class="token assign-left variable">CONN_PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span> <span class="token comment"># -v</span>
            <span class="token assign-left variable">CONN_SHOW_DETAIL</span><span class="token operator">=</span>true
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token string">&#39;n&#39;</span><span class="token punctuation">)</span> <span class="token comment"># -n</span>
            <span class="token assign-left variable">CONN_PORT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        ?<span class="token punctuation">)</span> <span class="token comment"># 其它未指定名称参数</span>
            <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unknown argument(s).&quot;</span>
            <span class="token builtin class-name">exit</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
<span class="token comment"># 删除已解析的参数</span>
<span class="token builtin class-name">shift</span> <span class="token variable"><span class="token variable">$((</span>OPTIND<span class="token operator">-</span><span class="token number">1</span><span class="token variable">))</span></span>
<span class="token comment">#也可以将shift写进每个option里面，shift命令用于对参数的移动(左移)，通常用于在不知道传入参数个数的情况下依次遍历每个参数然后进行相应处理（常见于Linux中各种程序的启动脚本）。</span>
<span class="token comment">#shift(shift 1) 命令每执行一次，变量的个数($#)减一（之前的$1变量被销毁,之后的$2就变成了$1），而变量值提前一位。同理，shift n后，前n位参数都会被销毁</span>
<span class="token comment"># 通过第一个无名称参数获取 主机</span>
<span class="token assign-left variable">CONN_HOST</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>
<span class="token comment"># 显示获取参数结果</span>
<span class="token builtin class-name">echo</span> 用户名      <span class="token string">&quot;<span class="token variable">$CONN_USERNAME</span>&quot;</span>
<span class="token builtin class-name">echo</span> 密码        <span class="token string">&quot;<span class="token variable">$CONN_PASSWORD</span>&quot;</span>
<span class="token builtin class-name">echo</span> 主机        <span class="token string">&quot;<span class="token variable">$CONN_HOST</span>&quot;</span>
<span class="token builtin class-name">echo</span> 端口        <span class="token string">&quot;<span class="token variable">$CONN_PORT</span>&quot;</span>
<span class="token builtin class-name">echo</span> 显示详情     <span class="token string">&quot;<span class="token variable">$CONN_SHOW_DETAIL</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>:u:p:n:v</code> 就是指定要解析的参数名称。</p><p>规则说明：</p><ul><li>其中的字母表示需要解析的参数名称</li><li>字母后面的冒号 <code>:</code> 表示该参数除了其本身，还会带上一个参数作为选项的值，传入的值通过 <code>$OPTARG</code> 变量获取</li><li>字母后面<strong>没有</strong>冒号 <code>:</code> 表示该参数为开关型选项，不需要再指定值，只作为是否存在的标记</li><li>字符串开头的冒号 <code>:</code> 表示解析过程中，遇到未在 <code>getopts</code> 参数列表中指定的参数，不显示报错信息。否则会报出错误。</li></ul><p>使用 <code>getopts</code> 解析参数时，按照指定参数列表依次进行解析。如果本次解析符合指定参数规则，包括参数名称、是否需要传值等规则，则返回成功，进行下一次循环继续解析，否则退出循环。</p><p>失败规则：</p><ul><li>遇到未定义的变量</li><li>遇到了意外的值，如：在不需要传值的参数后面指定了参数，或者传入了比期待更多的值</li></ul><p>失败后退出循环。</p><p><strong>注意！！！不带名称的参数一定要写到最后！否则会被认为是不期待的参数，导致停止解析。</strong></p><h4 id="getopts-的局限" tabindex="-1"><a class="header-anchor" href="#getopts-的局限" aria-hidden="true">#</a> <code>getopts</code> 的局限</h4><p>对于常用的不太复杂的场景，使用 <code>getopts</code> 处理参数基本够用，也更方便，而且是内部命令，不用考虑安装问题，但也有一些局限：</p><ul><li>选项参数的格式必须是 <code>-d val</code> 而不能是中间没有空格的 <code>-dval</code></li><li>所有<code>选项参数</code>必须写在其它参数的前面，因为 <code>getopts</code> 是从命令行前面开始处理，遇到非 <code>-</code> 开头的参数，或者选项参数结束标记 <code>--</code> 就中止了，如果中间遇到<code>非选项命令行参数</code>，后面的选项参数就都取不到了。</li><li>不支持 <code>--debug</code> 这样的长选项</li></ul><h3 id="getopt-使用说明" tabindex="-1"><a class="header-anchor" href="#getopt-使用说明" aria-hidden="true">#</a> <code>getopt</code> 使用说明</h3>`,24),d=n("code",null,"getopt",-1),u={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FUtil-linux",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"getopt",-1),k=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/share/doc/util-linux-2.23.2
/usr/share/getopt/
/usr/share/docs/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本样例参考了如下脚本：</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>/usr/share/doc/util-linux-2.23.2/getopt-parse.bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>macOS 自带的 <code>getopt</code> 功能比较弱，不支持长选项，可以安装 GNU 版本 <code>gnu-getopt</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> gnu-getopt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看getopt的帮助信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ getopt <span class="token parameter variable">--help</span>

用法：
 getopt optstring parameters
 getopt <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> optstring parameters
 getopt <span class="token punctuation">[</span>options<span class="token punctuation">]</span> -o<span class="token operator">|</span>--options optstring <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> parameters

选项：
 -a, <span class="token parameter variable">--alternative</span>            允许长选项以 - 开始
 -h, <span class="token parameter variable">--help</span>                   这个简短的用法指南
 -l, <span class="token parameter variable">--longoptions</span> <span class="token operator">&lt;</span>长选项<span class="token operator">&gt;</span>    要识别的长选项
 -n, <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>程序名<span class="token operator">&gt;</span>           将错误报告给的程序名
 -o, <span class="token parameter variable">--options</span> <span class="token operator">&lt;</span>选项字符串<span class="token operator">&gt;</span>     要识别的短选项
 -q, <span class="token parameter variable">--quiet</span>                  禁止 getopt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 的错误报告
 -Q, --quiet-output           无正常输出
 -s, <span class="token parameter variable">--shell</span> <span class="token operator">&lt;</span>shell<span class="token operator">&gt;</span>          设置 shell 引用规则
 -T, <span class="token parameter variable">--test</span>                   测试 getopt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 版本
 -u, <span class="token parameter variable">--unquoted</span>               不引用输出
 -V, <span class="token parameter variable">--version</span>                输出版本信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面提到的案例，这里增加一个<code>日志级别</code>选项，此选项有默认值，也可以自行指定参数值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 短参数格式</span>
$ myscript <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span> password <span class="token parameter variable">-v</span> <span class="token parameter variable">-n</span> <span class="token number">9999</span> <span class="token number">192.168</span>.1.2 <span class="token parameter variable">-l3</span>
<span class="token comment"># 或 长参数格式</span>
$ myscript <span class="token parameter variable">--username</span> username <span class="token parameter variable">--password</span> password <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--port</span> <span class="token number">9999</span> <span class="token number">192.168</span>.1.2 --log-level<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-u</code>, <code>--username</code></td><td>用户名</td></tr><tr><td><code>-p</code>, <code>--password</code></td><td>密码</td></tr><tr><td><code>-n</code>, <code>--port</code></td><td>端口</td></tr><tr><td><code>-v</code>, <code>--verbose</code></td><td>显示详情</td></tr><tr><td><code>-l</code>, <code>--log-level</code></td><td>日志级别，默认级别为 1</td></tr><tr><td>无名称参数</td><td>主机</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 使用 &quot;$@&quot; 来让每个命令行参数扩展为一个单独的单词。 &quot;$@&quot; 周围的引号是必不可少的！</span>
<span class="token comment"># 使用 getopt 整理参数</span>
<span class="token assign-left variable">ARGS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>getopt <span class="token parameter variable">-o</span> <span class="token string">&#39;u:p:n:vl::&#39;</span> <span class="token parameter variable">-l</span> <span class="token string">&#39;username:,password:,port:,verbose,log-level::&#39;</span> -- <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Parse error! Terminating...&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token keyword">fi</span>

<span class="token comment"># 将参数设置为 getopt 整理后的参数</span>
<span class="token comment"># $ARGS 需要用引号包围</span>
<span class="token builtin class-name">eval</span> <span class="token builtin class-name">set</span> -- <span class="token string">&quot;<span class="token variable">$ARGS</span>&quot;</span>

<span class="token comment"># 循环解析参数</span>
<span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>
     <span class="token comment"># 从第一个参数开始解析</span>
     <span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token keyword">in</span>
          <span class="token comment"># 用户名，需要带参数值，所以通过 $2 取得参数值，获取后通过 shift 清理已获取的参数</span>
          -u<span class="token operator">|</span>--username<span class="token punctuation">)</span> <span class="token assign-left variable">CONN_USERNAME</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          <span class="token comment"># 密码，获取规则同上</span>
          -p<span class="token operator">|</span>--password<span class="token punctuation">)</span> <span class="token assign-left variable">CONN_PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          <span class="token comment"># 端口，获取规则同上</span>
          -n<span class="token operator">|</span>--port<span class="token punctuation">)</span> <span class="token assign-left variable">CONN_PORT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          <span class="token comment"># 是否显示详情，开关型参数，带上该选项则执行此分支</span>
          -v<span class="token operator">|</span>--verbose<span class="token punctuation">)</span> <span class="token assign-left variable">CONN_SHOW_DETAIL</span><span class="token operator">=</span>true <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          <span class="token comment"># 日志级别，默认值参数</span>
          <span class="token comment"># 短格式：-l3</span>
          <span class="token comment"># 长格式：--log-level=3</span>
          -l<span class="token operator">|</span>--log-level<span class="token punctuation">)</span>
               <span class="token comment"># 如指定了参数项，未指定参数值，则默认得到空字符串，可以根据此规则使用默认值</span>
               <span class="token comment"># 如果指定了参数值，则使用参数值</span>
               <span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token keyword">in</span>
                    <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token assign-left variable">CONN_LOG_LEVEL</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
                    *<span class="token punctuation">)</span>  <span class="token assign-left variable">CONN_LOG_LEVEL</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
               <span class="token keyword">esac</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          --<span class="token punctuation">)</span> <span class="token builtin class-name">shift</span> <span class="token punctuation">;</span> <span class="token builtin class-name">break</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
          *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Internal error!&quot;</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
     <span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token comment"># 通过第一个无名称参数获取 主机</span>
<span class="token assign-left variable">CONN_HOST</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>

<span class="token comment"># 显示获取参数结果</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;用户名：    &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_USERNAME</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;密码：      &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_PASSWORD</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;主机：      &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_HOST</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;端口：      &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_PORT</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;显示详情：  &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_SHOW_DETAIL</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;日志级别：  &#39;</span>  <span class="token string">&quot;<span class="token variable">$CONN_LOG_LEVEL</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、说明" tabindex="-1"><a class="header-anchor" href="#_4、说明" aria-hidden="true">#</a> 4、说明</h4><p>其实 <code>getopt</code> 只负责做参数的重新整理，并不管提取参数值。它会根据指定的参数列表，把命令行中的选项参数集中放到前面，仅此而已。这样处理之后，再自己通过代码进行解析就比较简单了。所以上面的代码样例，真正涉及 getopt 使用的只有一行，其余的代码都是配合 getopt 重新排列的参数，自行进一步解析而已。</p><p>在本例中，<code>选项参数</code>与<code>非选项参数</code>没有按顺序排列，所以先告诉 <code>getopt</code> 命令要解析哪些参数：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>getopt <span class="token operator">-</span>o <span class="token lifetime-annotation symbol">&#39;u</span><span class="token punctuation">:</span>p<span class="token punctuation">:</span>n<span class="token punctuation">:</span><span class="token namespace">vl<span class="token punctuation">::</span></span>&#39; <span class="token operator">-</span>l <span class="token lifetime-annotation symbol">&#39;username</span><span class="token punctuation">:</span><span class="token punctuation">,</span>password<span class="token punctuation">:</span><span class="token punctuation">,</span>port<span class="token punctuation">:</span><span class="token punctuation">,</span>verbose<span class="token punctuation">,</span>log<span class="token operator">-</span><span class="token namespace">level<span class="token punctuation">::</span></span>&#39; <span class="token operator">-</span><span class="token operator">-</span> <span class="token string">&quot;$@&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数规则：</p><ul><li><code>-o</code> 参数指定端参数格式，<code>-l</code> 参数指定对应的长参数</li><li>冒号 <code>:</code> 规则与 <code>getopts</code> 的规则基本一致。区别在于后面带有两个冒号 <code>::</code> 的表示默认值参数</li><li>对于<code>默认值选项</code>，短参数形式参数名与值之间不能有空格，长参数形式参数名与值需要用等号.<code>=</code> 连接</li></ul>`,18);function m(b,g){const e=c("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[d,s(" 是 "),n("a",u,[s("util-linux"),l(e)]),s(" 包中的一个命令，Linux 中基本都已预安装了"),v,s("，样例脚本一般安装到如下位置：")]),k])}const q=t(i,[["render",m],["__file","getopt长短参数.html.vue"]]);export{q as default};
