import{_ as t,W as l,X as r,Y as e,Z as s,$ as n,a0 as i,D as d}from"./framework-b4edc447.js";const c={},o=e("h1",{id:"ssh免密配置及ansible基础知识",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ssh免密配置及ansible基础知识","aria-hidden":"true"},"#"),s(" ssh免密配置及ansible基础知识")],-1),p=e("strong",null,"Secure Shell",-1),h=e("strong",null,"SSH",-1),u={href:"https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="如何配置免密登录" tabindex="-1"><a class="header-anchor" href="#如何配置免密登录" aria-hidden="true">#</a> 如何配置免密登录</h2><p>免密登录，只需三步。</p><ul><li>首先在SSH服务端配置允许公钥私钥配对认证，</li><li>然后在客户端生成公钥，</li><li>最后将客户端的公钥上传到服务端。</li></ul><p>这样就可以从客户端免密登录服务端特定的用户了。</p><h2 id="在服务端上-提供ssh服务-就是你登录的那台机器-进行如下操作" tabindex="-1"><a class="header-anchor" href="#在服务端上-提供ssh服务-就是你登录的那台机器-进行如下操作" aria-hidden="true">#</a> 在服务端上（提供ssh服务，就是你登录的那台机器）进行如下操作</h2><p>以root用户登录，更改ssh配置文件 /etc/ssh/sshd_config，去除以下配置的注释，然后重启sshd服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RSAAuthentication <span class="token function">yes</span> <span class="token comment">#启用rsa认证 </span>
PubkeyAuthentication <span class="token function">yes</span> <span class="token comment">#启用公钥私钥配对认证方式</span>
AuthorizedKeysFile .ssh/authorized_keys <span class="token comment">#公钥文件路径</span>
systemctl restart sshd  //重启ssh服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在客户端上执行" tabindex="-1"><a class="header-anchor" href="#在客户端上执行" aria-hidden="true">#</a> 在客户端上执行</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@client /]#ssh-keygen -t rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一路默认回车，系统在当前目录下，也就是/root/.ssh下生成id_rsa、id_rsa.pub</p><h2 id="把id-rsa-pub发送到服务端机器上" tabindex="-1"><a class="header-anchor" href="#把id-rsa-pub发送到服务端机器上" aria-hidden="true">#</a> 把id_rsa.pub发送到服务端机器上</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@client /]#ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.11.20 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令是将刚才生成的公钥发送到你要登录的服务端保存</p><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh root@192.168.11.20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果当前用户和你要登录到的机器的用户都是root，那么你可以直接</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh 192.168.11.20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="ansible基础知识" tabindex="-1"><a class="header-anchor" href="#ansible基础知识" aria-hidden="true">#</a> ansible基础知识</h1><h2 id="_1-什么是ansible" tabindex="-1"><a class="header-anchor" href="#_1-什么是ansible" aria-hidden="true">#</a> 1.什么是Ansible</h2><p>Ansible是python 中的一套模块，系统中的一套自动化工具，只需要使用ssh协议连接及可用来</p><p>系统管理、自动化执行命令等任务。</p><h2 id="_2-ansible优势" tabindex="-1"><a class="header-anchor" href="#_2-ansible优势" aria-hidden="true">#</a> 2.Ansible优势</h2><p>1、ansible不需要单独安装客户端，也不需要启动任何服务</p><p>2、ansible是python中的一套完整的自动化执行任务模块</p><p>3、 ansible playbook，采用yaml配置，对于自动化任务执行一目了然</p><p>4、 ansible 模块较多，对于自动化的场景支持较丰富</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/13003735/1658243428568-687cc674-78b5-421d-ae02-03d7f2d37fe2.png?x-oss-process=image%2Fresize%2Cw_1038%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>Ansible Playbook</strong></p><p>任务剧本（又称任务集），编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，yaml格式。</p><p><strong>Inventory</strong></p><p>Ansible管理主机的清单，默认是/etc/ansible/hosts文件。</p><p><strong>Modules</strong></p><p>Ansible执行命令的功能模块，Ansible2.3版本为止，共有1039个模块。还可以自定义模块。 <strong>Plugins</strong></p><p>插件，模块功能的补充，常有连接类型插件，循环插件，变量插件，过滤插件，插件功能用的较少。</p><p>/etc/ansible/hosts文件，用于定义被管理主机的认证信息，例如ssh登录用户名、密码以及key相关信息。</p><p>1.主机支持主机名通配以及正则表达式，例如web[1:3].test.com代表三台主机</p>`,36),m={href:"http://xn--web1-zu6fx14c.test.com:6666",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>3.主机支持指定变量，可对个别主机的特殊配置，如登陆用户，密码</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/13003735/1658245371459-8b8716fb-9c36-4b7f-bf6a-941b33a72e11.png?x-oss-process=image%2Fresize%2Cw_1169%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>Ansible执行返回-&gt;颜色信息说明</p><ul><li>黄色：对远程节点进行相应修改</li><li>绿色：对远程节点不进行相应修改，或者只是对远程节点信息进行查看</li><li>红色：操作执行命令有异常</li><li>紫色：表示对命令执行发出警告信息（可能存在的问题，给你一下建议）</li></ul><h3 id="script脚本模块" tabindex="-1"><a class="header-anchor" href="#script脚本模块" aria-hidden="true">#</a> script脚本模块</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ansible test -m script -a &quot;/server/scripts/yum. sh&quot;
#在本地运行模块，等同于在远程执行，不需要将脚本文件进行推送目标主机执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yum安装软件模块" tabindex="-1"><a class="header-anchor" href="#yum安装软件模块" aria-hidden="true">#</a> yum安装软件模块</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ansible test -m yum -a &#39;name=httpd state=installed&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="copy文件拷贝模块" tabindex="-1"><a class="header-anchor" href="#copy文件拷贝模块" aria-hidden="true">#</a> <strong>copy文件拷贝模块</strong></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-Q</span> <span class="token string">&quot;&#39;src=/etc/hosts dest-/tmp/test.txt&quot;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">&quot;src=/etc/hosts dest=/tmp/test.txt backup=yes&quot;</span>
＃ 在推送覆盖远程端文件前，对远端已有文件进行备份，按照时间信息备份
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">&quot;content=&#39;bgx&#39; dest=/tmp/test&quot;</span>
<span class="token comment">#  直接向远端文件内写入数据信息，并且会覆盖远端文件内原有数据信息</span>
src <span class="token comment">#推送数据的源文件信息</span>
dest <span class="token comment">#推送数据的目标路径</span>
backup <span class="token comment">#对推送传输过去的文件，进行备份</span>
content <span class="token comment">#直接批量在被管理端文件中添加内容</span>
group <span class="token comment">#将本地文件推送到远端，指定文件属组信息</span>
owner <span class="token comment">#将本地文件推送到远端，指定文件属主信息</span>
mode <span class="token comment">#将本地文件推送到远端，指定文件权限信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service服务模块" tabindex="-1"><a class="header-anchor" href="#service服务模块" aria-hidden="true">#</a> service服务模块</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@m01 ~]# ansible test -m service -a &quot;name=crond state=stopped enabled=yes&quot;

name        # 定义要启动服务的名称
state       # 指定服务状态
    started     #启动服务
    stopped     #停止服务
    restarted   #重启服务
    reloaded    #重载服务
enabled         #开机自启
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),g={href:"https://halysl.github.io/2020/03/11/ansible%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%BA%94%E7%94%A8/#%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97-playbook",target:"_blank",rel:"noopener noreferrer"},x=i('<h3 id="raw-模块" tabindex="-1"><a class="header-anchor" href="#raw-模块" aria-hidden="true">#</a> raw 模块</h3><p>raw 模块的功能与 shell 和 command 类似。但 raw 模块运行时不需要在远程主机上配置 python 环境</p><h3 id="command-模块" tabindex="-1"><a class="header-anchor" href="#command-模块" aria-hidden="true">#</a> command 模块</h3><p>command 模块用于运行系统命令。不支持管道符和变量等（”&lt;”, “&gt;”, “”, and “&amp;”等），如果要使用这些，那么可以使用 shell 模块。在使用 ansible 中的时候，默认的模块是 <code>-m command</code>，从而模块的参数不需要填写，直接使用即可。</p><h3 id="shell-模块" tabindex="-1"><a class="header-anchor" href="#shell-模块" aria-hidden="true">#</a> shell 模块</h3><p>它负责在被 ansible 控制的节点（服务器）执行命令行。shell 模块是通过 /bin/sh 进行执行，所以 shell 模块可以执行任何命令，就像在本机执行一样。</p><h3 id="script-模块" tabindex="-1"><a class="header-anchor" href="#script-模块" aria-hidden="true">#</a> script 模块</h3><p>script 模块将控制节点的脚本执行在被控节点上。</p>',8);function _(f,k){const a=d("ExternalLinkIcon");return l(),r("div",null,[o,e("blockquote",null,[e("p",null,[p,s("（安全外壳协议，简称"),h,s("）是一种加密的"),e("a",u,[s("网络传输协议"),n(a)]),s("，在不安全的网络中为网络服务提供安全的传输")])]),b,e("p",null,[s("2.主机支持基于非标准的ssh端口，"),e("a",m,[s("例如web1.test.com:6666"),n(a)])]),v,e("p",null,[s("资料："),e("a",g,[s("https://halysl.github.io/2020/03/11/ansible基本操作及应用/#核心模块-playbook"),n(a)])]),x])}const A=t(c,[["render",_],["__file","ssh免密配置及ansible基础知识.html.vue"]]);export{A as default};
