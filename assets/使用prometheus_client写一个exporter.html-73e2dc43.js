import{_ as p,W as o,X as c,Y as s,Z as n,$ as t,a0 as e,D as i}from"./framework-b4edc447.js";const l={},u=s("h1",{id:"使用prometheus-client写一个exporter",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用prometheus-client写一个exporter","aria-hidden":"true"},"#"),n(" 使用prometheus_client写一个exporter")],-1),r={href:"https://github.com/ncabatoff/process-exporter",target:"_blank",rel:"noopener noreferrer"},k=s("h1",{id:"键盘拿来",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#键盘拿来","aria-hidden":"true"},"#"),n(),s("strong",null,"键盘拿来")],-1),d={href:"https://github.com/prometheus/client_python",target:"_blank",rel:"noopener noreferrer"},m={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://pub.dev/documentation/prometheus_client/latest/prometheus_client/prometheus_client-library.html",target:"_blank",rel:"noopener noreferrer"},b=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> redirect
<span class="token keyword">from</span> prometheus_client <span class="token keyword">import</span> generate_latest<span class="token punctuation">,</span> CollectorRegistry<span class="token punctuation">,</span> Gauge

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
registry <span class="token operator">=</span> CollectorRegistry<span class="token punctuation">(</span>auto_describe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;创建一个仓库装收集到的指标&#39;&#39;&#39;</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/metrics&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    port_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6984</span><span class="token punctuation">,</span> <span class="token number">6985</span><span class="token punctuation">,</span> <span class="token number">6998</span><span class="token punctuation">,</span> <span class="token number">7878</span><span class="token punctuation">,</span> <span class="token number">7879</span><span class="token punctuation">,</span> <span class="token number">7880</span><span class="token punctuation">,</span> <span class="token number">618</span><span class="token punctuation">,</span> <span class="token number">8814</span><span class="token punctuation">,</span> <span class="token number">8815</span><span class="token punctuation">,</span> <span class="token number">8816</span><span class="token punctuation">,</span> <span class="token number">8817</span><span class="token punctuation">,</span> <span class="token number">8818</span><span class="token punctuation">,</span> <span class="token number">8819</span><span class="token punctuation">,</span> <span class="token number">718</span><span class="token punctuation">,</span> <span class="token number">815</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> port_list<span class="token punctuation">:</span>
        shell <span class="token operator">=</span> <span class="token string">&quot;netstat -unlp |awk -F: &#39;{print $4}&#39;|grep ^%s |wc -l&quot;</span> <span class="token operator">%</span> i
        command <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>
        command <span class="token operator">=</span> command<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        gauge <span class="token operator">=</span> Gauge<span class="token punctuation">(</span><span class="token string">&#39;Port{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;show filebeat UDP port status&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Port&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> registry<span class="token operator">=</span>registry<span class="token punctuation">)</span>
        gauge<span class="token punctuation">.</span>labels<span class="token punctuation">(</span><span class="token string">&#39;{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>generate_latest<span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">&quot;/metrics&quot;</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;根路由重定向到/metrics&#39;&#39;&#39;</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9117</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s("code",null,"Duplicated timeseries in CollectorRegistry: {'Port6984'}",-1),g=s("code",null,"REGISTRY.unregister",-1),h={href:"https://pub.dev/documentation/prometheus_client/latest/prometheus_client/prometheus_client-library.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>将flask项目配置成service，使用systemd来管理，这样重启比较方便，不需要自己kil，再启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@filebeat ~<span class="token punctuation">]</span><span class="token comment"># cat /usr/lib/systemd/system/flask_exporter.service</span>
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>flask_exporter.server
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>

<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/python3 /etc/flask_exporter.py
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用crontab重启这个service，问题是crontab的最小粒度是每分钟执行一次，Google到了一个思路如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   * * * * * systemctl restart flask_exporter.service
   * * * * * <span class="token function">sleep</span> <span class="token number">10</span><span class="token punctuation">;</span> systemctl restart flask_exporter.service
   * * * * * <span class="token function">sleep</span> <span class="token number">20</span><span class="token punctuation">;</span> systemctl restart flask_exporter.service
   * * * * * <span class="token function">sleep</span> <span class="token number">30</span><span class="token punctuation">;</span> systemctl restart flask_exporter.service
   * * * * * <span class="token function">sleep</span> <span class="token number">40</span><span class="token punctuation">;</span> systemctl restart flask_exporter.service
   * * * * * <span class="token function">sleep</span> <span class="token number">50</span><span class="token punctuation">;</span> systemctl restart flask_exporter.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总算是把这个问题用各种歪门邪道给解决了，折腾了好久。</p><h1 id="还能优化" tabindex="-1"><a class="header-anchor" href="#还能优化" aria-hidden="true">#</a> <strong>还能优化</strong></h1><p>后来在看别人的代码时发现了新的用法，再次发起了尝试。代码修改如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> prometheus_client
<span class="token keyword">from</span> prometheus_client <span class="token keyword">import</span> start_http_server<span class="token punctuation">,</span> Gauge

prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>PROCESS_COLLECTOR<span class="token punctuation">)</span>
prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>PLATFORM_COLLECTOR<span class="token punctuation">)</span>
prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>GC_COLLECTOR<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;取消注册prometheus_client默认会收集的没啥用的数据，这样指标页面就没这些垃圾了。&#39;&#39;&#39;</span>
UDP_PORT <span class="token operator">=</span> Gauge<span class="token punctuation">(</span><span class="token string">&quot;PORT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;show port status&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;创建一个我们自己的指标，类型是Gauge&#39;&#39;&#39;</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    start_http_server<span class="token punctuation">(</span><span class="token number">9117</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;开启http暴露指标，端口在9117&#39;&#39;&#39;</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        port_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6984</span><span class="token punctuation">,</span> <span class="token number">6985</span><span class="token punctuation">,</span> <span class="token number">6998</span><span class="token punctuation">,</span> <span class="token number">7878</span><span class="token punctuation">,</span> <span class="token number">7879</span><span class="token punctuation">,</span> <span class="token number">7880</span><span class="token punctuation">,</span> <span class="token number">618</span><span class="token punctuation">,</span> <span class="token number">8814</span><span class="token punctuation">,</span> <span class="token number">8815</span><span class="token punctuation">,</span> <span class="token number">8816</span><span class="token punctuation">,</span> <span class="token number">8817</span><span class="token punctuation">,</span> <span class="token number">8818</span><span class="token punctuation">,</span> <span class="token number">8819</span><span class="token punctuation">,</span> <span class="token number">718</span><span class="token punctuation">,</span> <span class="token number">815</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> port_list<span class="token punctuation">:</span>
            shell <span class="token operator">=</span> <span class="token string">&quot;netstat -unlp |awk -F: &#39;{print $4}&#39;|grep ^%s |wc -l&quot;</span> <span class="token operator">%</span> i
            <span class="token triple-quoted-string string">&#39;&#39;&#39;在脚本所在的机器上执行如下命令，如果端口存活，wc的结果就是1，其他任何值都是不正常的。&#39;&#39;&#39;</span>
            command <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>
            command <span class="token operator">=</span> command<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token triple-quoted-string string">&#39;&#39;&#39;获取shell的执行结果&#39;&#39;&#39;</span>
            UDP_PORT<span class="token punctuation">.</span>labels<span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token triple-quoted-string string">&#39;&#39;&#39;将i的值传递给这个UDP_PORT的label，并将command的值转换后赋值给UDP_PORT这个指标&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴露指标的方式由flask改成prometheus_client自带的<code>start_http_server</code>，尽量减少引入外部的模块。</p><figure><img src="https://s2.loli.net/2023/02/02/3nHbPzXLIvtAear.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样解决了指标页面不能刷新的问题，因为根本没用CollectorRegistry，并且指标的名字是一致的（这样在编写告警规则时可以写成<code>UDP_PORT{}!=0</code>这样一条规则就能够匹配全部的端口告警，不用为每个端口写一条规则),之前一个Registry里面不允许出现重复的metric。</p><h1 id="纠错" tabindex="-1"><a class="header-anchor" href="#纠错" aria-hidden="true">#</a> 纠错</h1><p>上述代码在目标网址ping不通的时候，报错会导致脚本退出，优化为如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">import</span> prometheus_client
<span class="token keyword">from</span> prometheus_client <span class="token keyword">import</span> start_http_server<span class="token punctuation">,</span> Gauge
<span class="token keyword">import</span> requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3
 
requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>PROCESS_COLLECTOR<span class="token punctuation">)</span>
prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>PLATFORM_COLLECTOR<span class="token punctuation">)</span>
prometheus_client<span class="token punctuation">.</span>REGISTRY<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>prometheus_client<span class="token punctuation">.</span>GC_COLLECTOR<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;取消注册prometheus_client默认会收集的没啥用的数据，这样指标页面就没这些垃圾了。&#39;&#39;&#39;</span>
web_status <span class="token operator">=</span> Gauge<span class="token punctuation">(</span><span class="token string">&quot;web_status&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;show port status&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;web_url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;创建一个我们自己的指标，类型是Gauge&#39;&#39;&#39;</span>
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    start_http_server<span class="token punctuation">(</span><span class="token number">9118</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;开启http暴露指标，端口在9118&#39;&#39;&#39;</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;https://netapi.devops.apple.com/anti-phishing/ping&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://10.23.188.135:8080/ping&#39;</span><span class="token punctuation">,</span>
                    <span class="token string">&#39;http://10.23.188.136:8080/ping&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
                    web_status<span class="token punctuation">.</span>labels<span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    web_status<span class="token punctuation">.</span>labels<span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token triple-quoted-string string">&#39;&#39;&#39;之前访问出错会导致脚本出错，因为错误类型指定不够准确，现在将错误指定为requests.exceptions.ConnectionError，正常运行&#39;&#39;&#39;</span>
                web_status<span class="token punctuation">.</span>labels<span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;出错了访问不了&quot;</span><span class="token punctuation">)</span>
 
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function y(w,x){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在使用filebeat收集系统日志时，有些网络设备的日志是filebeat通过UDP端口收集的，并且有多个filebeat在使用多个UDP端口同时运行，为了保证日志的完整性，为了避免filebeat意外停止。于是需要监控filebeat的运行状态，首先想到的是"),s("a",r,[n("process_exporter"),t(a)]),n(",在调研了proces_exporter的功能后，发现process_exporter对监控同名的多个进程也很麻烦，不能够很好的解决问题。另外一个方案使用blackbox_exporter监控filebeat使用的端口，但是详细了解后发现blackbox_exporter并不支持监控UDP端口，于是开始考虑自己写一个。")]),k,s("p",null,[s("a",d,[n("prometheus_client"),t(a)]),n(" The official Python client for "),s("a",m,[n("Prometheus"),t(a)]),n("，安装和使用详见"),s("a",v,[n("官方文档"),t(a)]),n("，下面贴上我的代码")]),b,s("p",null,[n("以上是第一版的代码，使用了flask，prometheus_client,os，为了实现下次新增端口时不需要大改代码，将所有的端口放进了列表，并且有一个致命的问题，就是不能刷新指标界面，一旦刷新就重新触发路由，重新给gauge赋值，这时候就会报错"),_,n("意思是这个CollectorRegistry里面有重复的时间序列，因此考虑过怎样把这个CollectorRegistry清空呢？考虑到前面有个注册的步骤，我就尝试用"),g,n("取消注册，几番Google之后还是没能实现，后来查看"),s("a",h,[n("官方文档"),t(a)]),n("，发现Gauge对象有个clear的方法能清除，但是使用起来的效果也不是我想要的，后来便放弃只能另辟蹊径，定时将flask脚本重启，这样Prometheus在采集时就能够获取到最新的数据。")]),f])}const R=p(l,[["render",y],["__file","使用prometheus_client写一个exporter.html.vue"]]);export{R as default};
