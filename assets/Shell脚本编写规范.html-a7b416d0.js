import{_ as i,W as t,X as c,Y as s,Z as a,$ as e,a0 as l,D as p}from"./framework-b4edc447.js";const r={},o=s("h1",{id:"shell脚本编写规范",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell脚本编写规范","aria-hidden":"true"},"#"),a(" Shell脚本编写规范")],-1),d={id:"shell十三问",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#shell十三问","aria-hidden":"true"},"#",-1),h={href:"https://github.com/wzb56/13_questions_of_shell",target:"_blank",rel:"noopener noreferrer"},m={href:"http://xn--ClearLog-jo1ot97l.sh",target:"_blank",rel:"noopener noreferrer"},b={href:"http://clearlog.sh",target:"_blank",rel:"noopener noreferrer"},v=l("<li>尽量使用UTF-8编码，注释及输出尽量使用英文；</li><li>一般给到执行权限，但一些关于变量的配置文件不用加执行权限；</li><li>执行的时候可以使用bash 执行，或者使用bash -x执行，可以直观的显示具体的执行过程；</li><li>脚本首行使用/bin/bash,没有空格，不带任何选项；</li><li>第二行为空格，或者是添加一行空注释</li><li>接着开始注释内容：文件名、功能描述、作者、最后修改日期、版本号以及一些说明，还加上邮箱/手机号做为+ 系，如果可以，需要加上版权声明；</li><li>注释内容之后空一行开始定义shell脚本中的变量；</li><li>脚本内的变量定义，尽量使用大写，或者大小写驼峰写法,或者使用下划线连接的方式。变量名要见名之意，避+ a,b,c类似的定义，变量的定义前后不要用空格。</li><li>如果是整形，需要使用declare -i来声明。</li><li>如果是数组，则需要使用declare -a来声明。</li><li>如果是只读变量，则需要使用declare -r来声明。</li><li>变量值尽量使用双引号引起来，如果要使用强引用，如变量值中包含$符号，则使用”单引号引起来。</li><li>如果要将命令的执行结果赋值给变量，则使用反引号，或者使用$().</li>",13),k=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果脚本在执行的时候需要大段输出提示信息，可是使用以下方式：</span>
    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> EOF
    This scripts used <span class="token keyword">for</span> XXX
    Usage:<span class="token variable">$0</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span>
    Pls be careful.
    Enjoy Yourself.
    EOF
    <span class="token comment"># 如果只是单行提示信息，可是使用echo的方式，可以添加颜色：</span>
    <span class="token builtin class-name">echo</span> “Welcome to use my script”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果需要创建临时文件，可以使用如下方式： mktemp -d /tmp/file$$ 其名称以 /tmp/file 开头并以当前 shell 进程的进程 ID 结尾。使用 $$ 可以获取当前 shell 进程的进程 ID。其中，-d 选项表示创建一个目录，不加 -d 选项则表示创建一个文件。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mktemp <span class="token parameter variable">-d</span> /tmp/file<span class="token variable">$$</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行此命令后，将会在 /tmp 目录下创建一个以 file 开头，以当前进程 ID 结尾的临时目录。例如，如果当前 shell 进程的进程 ID 是 1234，那么创建的目录名就是 /tmp/file1234。</p><p>使用临时文件或目录可以避免命名冲突和文件泄露等问题，因为它们只在当前进程的生命周期内存在，并在进程退出时自动删除。</p><ul><li>条件测试的时候，尽量使用[[]],而不用[]或者test，因为[[]]功能会更强大</li><li>算数运算使用(())或者是中括号，但是记得括号里面的变量不要再加$</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable"><span class="token punctuation">((</span><span class="token number">12</span><span class="token operator">+</span>i<span class="token punctuation">))</span></span>
而非<span class="token variable"><span class="token punctuation">((</span><span class="token number">12</span><span class="token operator">+</span>$i<span class="token punctuation">))</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>想要获取当前脚本所在目录，可以使用</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ScriptDir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token punctuation">$(</span>dirname $0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>具体解释如下：</p><p>$(dirname $0)：获取当前脚本的目录名，$0 表示当前脚本的文件名（包含路径），dirname 命令可以获取该&gt; 文件名所在的目录名。</p><p>cd $(dirname $0)：进入当前脚本所在的目录。</p><p>pwd：获取当前目录的绝对路径。</p><p>ScriptDir=$(cd $(dirname $0) &amp;&amp; pwd)：将当前目录的绝对路径赋值给变量 ScriptDir。</p><p>因此，执行这个命令后，变量 ScriptDir 将会保存当前脚本所在的目录的绝对路径。这个命令常用于获取脚本&gt; 所在目录的路径，方便在脚本中使用其他文件或目录的相对路径。</p></blockquote><ul><li>经常尝试不同的方法</li></ul><p>你在写脚本时碰到一个问题，然后你找到了一种独特的解决方法。下一次你偶然又碰到类似的问题，这时，不要再用以前你用过的方法来解决。试试另外一种方法吧。如果某一天再次遇到这种情况，再试试其它方法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>例如：

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> - eq <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Success&quot;</span>
<span class="token keyword">fi</span>
另一种方法：
<span class="token punctuation">[</span> <span class="token variable">$?</span> - eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Success&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,14);function _(g,f){const n=p("ExternalLinkIcon");return t(),c("div",null,[o,s("h2",d,[u,a(),s("a",h,[a("Shell十三问"),e(n)])]),s("ul",null,[s("li",null,[a("脚本名以.sh结尾，名称尽量见名之意，"),s("a",m,[a("比如ClearLog.sh"),e(n)]),a(" Clear_Log.sh "),s("a",b,[a("clearlog.sh"),e(n)]),a(" SerRestart+ sh Ser_Restart.sh;")]),v]),k])}const x=i(r,[["render",_],["__file","Shell脚本编写规范.html.vue"]]);export{x as default};
