import{_ as a,W as n,X as e,a0 as s}from"./framework-b4edc447.js";const i={},o=s(`<h1 id="博客发布流程简化" tabindex="-1"><a class="header-anchor" href="#博客发布流程简化" aria-hidden="true">#</a> 博客发布流程简化</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>我使用github作为我的博客存储库，每次我写了一篇新的博客想把markdown文件推送到github 第一步需要先git add ./* 第二步需要git commit -m &quot;update some thing&quot; 第三步需要git push origin main 我希望通过bash的alias命令帮我简化这个操作</p><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h2><blockquote><p>可以通过在 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 文件中添加别名（alias）来简化这个操作。具体步骤如下：</p><ol><li>打开终端，进入 home 目录：<code>cd ~</code></li><li>打开 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 文件：<code>nano .bashrc</code> 或 <code>nano .bash_profile</code></li><li>在文件中添加以下内容：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alias gadd=&quot;git add ./*&quot;
alias gcommit=&quot;git commit -m&quot;
alias gpush=&quot;git push origin main&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了三个别名：</p><ul><li><code>gadd</code>：执行 <code>git add ./*</code></li><li><code>gcommit</code>：执行 <code>git commit -m</code></li><li><code>gpush</code>：执行 <code>git push origin main</code></li></ul><ol><li>保存文件并退出编辑器。</li><li>重新加载文件：<code>source ~/.bashrc</code> 或 <code>source ~/.bash_profile</code></li></ol><p>现在，你就可以在终端中使用这些别名来简化操作了。例如，要将新博客文件添加到 Git 仓库并推送到 GitHub，只需执行以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>copy codegadd
gcommit &quot;Add new blog post&quot;
gpush
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就能够快速完成这个操作了。</p></blockquote><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><blockquote><p>通过使用一个函数来接受自定义的 commit 信息，这样就可以在一个命令中完成添加文件、提交文件和推送到远程仓库的操作，并且可以自定义 commit 信息。具体步骤如下：</p><ol><li>在 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 文件中添加以下内容：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function-name function">gp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">git</span> <span class="token function">add</span> ./* <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push origin main
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了一个名为 <code>gp</code> 的函数，它会执行以下三个操作：</p><ul><li><code>git add ./*</code></li><li><code>git commit -m</code>，这里的 commit 信息由函数的参数 <code>$1</code> 提供</li><li><code>git push origin main</code></li></ul><ol><li>保存文件并重新加载文件：<code>source ~/.bashrc</code> 或 <code>source ~/.bash_profile</code></li></ol><p>现在，你可以在终端中使用 <code>gp</code> 命令来快速将新博客文件添加到 Git 仓库并推送到 GitHub，并且可以自定义 commit 信息。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gp &quot;Add new blog post&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就能够非常方便地完成这个操作了，并且可以自定义 commit 信息。</p></blockquote><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><blockquote><p>当你想要比较多个文件或目录时，可以使用 <code>git diff</code> 命令的 <code>--name-only</code> 选项来获取差异的文件名列表。然后可以使用 <code>diff</code> 命令来比较文件的具体差异。具体步骤如下：</p><ol><li>在终端中进入你的本地 Git 仓库目录：<code>cd /path/to/local/repo</code></li><li>获取远程仓库的最新代码：<code>git fetch</code></li><li>比较本地代码和远程代码的差异，并获取差异的文件名列表：<code>git diff --name-only HEAD origin/main</code></li></ol><p>这里的 <code>--name-only</code> 选项表示只输出差异的文件名列表。</p><ol><li>使用 <code>diff</code> 命令比较差异的文件。例如，你可以将文件名列表作为 <code>diff</code> 命令的参数，并使用 <code>for</code> 循环来比较每个文件的具体差异。具体示例代码如下：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 获取差异文件名列表</span>
<span class="token assign-left variable">diff_files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> <span class="token function">diff</span> --name-only HEAD origin/main<span class="token variable">)</span></span>

<span class="token comment"># 如果没有差异，输出 &quot;same&quot; 并退出</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$diff_files</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;same&quot;</span>
  <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token keyword">fi</span>

<span class="token comment"># 如果有差异，输出 &quot;warning&quot; 并比较差异的文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;warning: files are different&quot;</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$diff_files</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;diff <span class="token variable">$file</span>:&quot;</span>
  <span class="token function">diff</span> <span class="token variable">$file</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">git</span> show origin/main:<span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token variable">$file</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本会输出 <code>same</code> 或 <code>warning: files are different</code>，并比较差异的文件。如果文件相同，则输出 <code>same</code>；如果文件不同，则输出 <code>warning: files are different</code> 并比较差异的文件。</p></blockquote>`,9),c=[o];function l(d,t){return n(),e("div",null,c)}const r=a(i,[["render",l],["__file","博客发布流程简化.html.vue"]]);export{r as default};
